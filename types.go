// Copyright 2014 The Azul3D Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package semver

import (
	"errors"
	"net/url"
)

// Repo defines a single repository and target version.
type Repo struct {
	Version

	// The root URL of the repository (excluding subpackages). For example a
	// package imported at:
	//
	//  https://example.com/pkg/subpkg
	//
	// Would have a root repository URL without "/subpkg":
	//
	//  https://github.com/example/pkg
	//
	// As that is where *the repository* lives; not the Go package itself.
	*url.URL

	// The subpath of the repository. It is joined with the repository root URL
	// in order to build the final package path. SubPath == "subpkg" in the
	// above example:
	//
	//  Repo.URL.String + repo.SubPath == "https://example.com/pkg/subpkg"
	//
	SubPath string

	// GoSource is literally the go-source meta tag content string. See the PR
	// for information on the go-source meta tag:
	//
	//  https://github.com/golang/gddo/pull/212#issue-50104435
	//
	GoSource string
}

// Status represents a single status code returned by a Handler's attempt to
// Handle any given request.
type Status int

const (
	// Unhandled is a status return when the request was not handled at all.
	Unhandled Status = iota

	// Handled is the status returned when the request was handled completely.
	Handled

	// PkgPage is the status returned when the request was not handled, but was
	// for the package page (e.g. when viewing the package's import path in a
	// web browser).
	PkgPage
)

var (
	// ErrNotPackageURL is the error returned by matchers when the URL is not
	// a valid package import path URL.
	ErrNotPackageURL = errors.New("not a valid package URL")
)

// HTTPError represents a HTTP error generated by a Handler's Relate function.
type HTTPError struct {
	error
	Status int
}
